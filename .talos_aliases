BIN_DIR="$HOME/workspace/talos/dotfiles/generated"
# local red="printf %b '\033]11;#440000\\a\\'"
# local orange="printf %b '\033]11;#cc7000\\a\\'"
# local green="printf %b '\033]11;#155600\\a\\'"
# local back="printf %b '\033]11;#333333\\a'"

function list_prod_instances() {
    gcloud compute instances list --project=talos-ava-prod --filter="status=RUNNING" --format="table(
    name,
    zone.basename(),
    status,
    networkInterfaces[].stackType.notnull().list())"
}
function list_uat_instances() {
    gcloud compute instances list --project=talos-ava-uat --filter="status=RUNNING" --format="table(
    name,
    zone.basename(),
    networkInterfaces[].stackType.notnull().list())"
}
#Creates a local cache of the instances for both uat and prod
function regen_instances() {
    echo "Regenerating instance cache"
    list_prod_instances | sed '1d' >"${BIN_DIR}/prod-instances.tsv"
    list_uat_instances | sed '1d' >"${BIN_DIR}/uat-instances.tsv"
}

function terminal_bg_color() {
    exec </dev/tty
    oldstty=$(stty -g)
    stty raw -echo min 0 time 2
    result=
    current_shell=$(ps -o comm= $$)
    if [[ "${current_shell}" =~ bash ]]; then
        echo -en "\033]11;?\033\\" >/dev/tty # request current background color
        if IFS=';' read -r -d '\' -n 24 color; then
            result="$color"
        fi
    else
        echo -en "\033]11;?\033\\" >/dev/tty # request current background color
        sleep 0.0001
        if IFS=';' read -r -d '\' -t 0 -k 24 color; then
            result="$color"
        fi
    fi
    result=$(echo "$result" | sed 's/^.*\;//;s/[^rgb:0-9a-f/]//g')
    stty $oldstty
    echo $result
}

#Creates aliases for connecting to the instances
function regen_aliases() {
    export red='printf %b "\033]11;#440000\a"'
    # local orange="printf %b '\033]11;#cc7000\\a\\'"
    export green='printf %b "\033]11;#155600\a"'
    # shellcheck disable=SC2016
    export back='printf %b "\033]11;${previous_bg}\a"'

    regen_instances

    echo "Regenerating prod aliases to "${BIN_DIR}/prod-aliases.sh
    echo "#!/bin/bash" >"${BIN_DIR}/prod-aliases.sh"
    echo "#Generated on $(date)" >>"${BIN_DIR}/prod-aliases.sh"
    awk '{printf "%s () { previous_bg=$(terminal_bg_color); %s && local_tunnel %s 5432 \"$@\"; %s; }\n", $1, ENVIRON["red"], $1, ENVIRON["back"] } ' "${BIN_DIR}/prod-instances.tsv" >>"${BIN_DIR}/prod-aliases.sh"

    echo "Regenerating uat aliases to "${BIN_DIR}/uat-aliases.sh
    echo "#!/bin/bash" >"${BIN_DIR}/uat-aliases.sh"
    echo "#Generated on $(date)" >>"${BIN_DIR}/uat-aliases.sh"
    awk '{printf "%s () { previous_bg=$(terminal_bg_color); %s && local_tunnel %s 5432 \"$@\"; %s; }\n", $1, ENVIRON["green"], $1, ENVIRON["back"] } ' "${BIN_DIR}/uat-instances.tsv" >>"${BIN_DIR}/uat-aliases.sh"

    source "${BIN_DIR}/prod-aliases.sh"
    source "${BIN_DIR}/uat-aliases.sh"
}

function decode_json_log() {
    if [ -z "$1" ]; then
        #read from stdin
        jq -r '[.ts, .severity, .caller, .message] | @tsv'
    else
        #read from file
        jq -r '[.ts, .severity, .caller, .message] | @tsv' "${1}"
    fi
}

# looks up the zone for a gcp instance
function zone_for_instance() {
    if [ -z "$1" ]; then
        echo "Usage: zone_for_instance instance_name"
        return 1
    fi
    local instance_name="$1"
    zone=$(awk -v instance_name="$instance_name" '$1 == instance_name { printf "%s\n", $2 }' "${BIN_DIR}/uat-instances.tsv" "${BIN_DIR}/prod-instances.tsv")

    if [ -z "${zone}" ]; then
        echo "Instance ${instance_name} not found"
        return 1
    fi
    echo "${zone}"
}

function project_for_instance() {
    if [ -z "$1" ]; then
        echo "Usage: proj_for_instance instance_name"
        return 1
    fi
    local instance_name="$1"
    project=$(awk -v instance_name="$instance_name" '$1 == instance_name { match(FILENAME, /uat|prod/); project=substr(FILENAME,RSTART,RLENGTH); printf "talos-ava-%s\n", project }' "${BIN_DIR}/uat-instances.tsv" "${BIN_DIR}/prod-instances.tsv")

    if [ -z "${project}" ]; then
        echo "Instance ${instance_name} not found"
        return 1
    fi
    echo "${project}"
}

# scp a file from the local box to a particular instance
# usage: push_to_gcp instance_name local_file [remote_file_location]
# default remote_file_location is the user's home directory
function push_to_gcp() {
    if [ -z "$1" ]; then
        echo "Usage: scp_to_instance instance_name local_file remote_file_location"
        return 1
    fi
    if [ -z "$2" ]; then
        echo "Usage: scp_to_instance instance_name local_file remote_file_location"
        return 1
    fi
    local local_file_location="${3:-"~"}"
    local instance_name="$1"
    local remote_file="$2"

    project="$(project_for_instance "${instance_name}")"
    zone="$(zone_for_instance "${instance_name}")"

    echo "gcloud beta compute scp --zone ${zone} --project ${project}  --tunnel-through-iap ${remote_file} ${instance_name}:${local_file_location}"
    gcloud beta compute scp --zone "${zone}" --project "${project}" --tunnel-through-iap "${remote_file}" "${instance_name}:${local_file_location}"
}

# opens tunnels to a gcp instance
# takes a list of ports to open
# optionally takes a -n to not shift the local ports by 10
function local_tunnel() {
    if [ -z "$1" ]; then
        echo "Usage: local_tunnel instance_name [-n] tunnel_port1 [tunnel_port2 ...]"
        return 1
    fi
    if [ -z "$2" ]; then
        echo "Usage: local_tunnel instance_name [-n] tunnel_port"
        return 1
    fi
    local instance_name="$1"
    shift

    local port_shift="1" #by default we prepend a 1 to the port number unless -n is given, which uses port as is
    if [[ "$1" == "-n" ]]; then
        port_shift=""
        shift
    fi

    project="$(project_for_instance "${instance_name}")"
    zone="$(zone_for_instance "${instance_name}")"
    local port="$2"
    local local_port="1${port}"

    cmd_str="gcloud beta compute ssh --zone ${zone} --project ${project} ${instance_name} --tunnel-through-iap --"
    for i in "$@"; do
        local port="${i}"
        local local_port="${port_shift}${port}"
        cmd_str="${cmd_str} -L ${local_port}:localhost:${port}"
    done
    echo "${cmd_str}"
    eval "${cmd_str}"
}

#Open a tunnel to a particular instance's PostgreSql port
function pg_tunnel() {
    if [ -z "$1" ]; then
        echo "Usage: pg_tunnel instance_name"
        return 1
    fi
    local_tunnel "$1" "5432"
}

#Open a tunnel to a particular instance's PostgreSql port
function cust_fix_tunnel() {
    if [ -z "$1" ]; then
        echo "Usage: cust_fix_tunnel instance_name"
        return 1
    fi
    local_tunnel "$1" "9193" "9194" "9195"
}

#alias wm_tunnels="gcloud beta compute ssh --zone us-east4-a --project talos-ava-uat uat-talos --tunnel-through-iap -- -L 19501:rfq-uat-1.wintermute-direct.com:19501  -L 19699:rfq-uat-1.wintermute-direct.com:19699 ${GCLOUD_SSH_OPTS}"
# Executes a command on a gcp instance
# gcp_exec instance_name command
function gcp_exec() {
    if [ -z "$1" ]; then
        echo "Usage: gcp_exec instance_name command"
        return 1
    fi
    if [ -z "$2" ]; then
        echo "Usage: gcp_exec instance_name command"
        return 1
    fi
    local instance_name="$1"
    local command="$2"

    project="$(project_for_instance "${instance_name} ")"
    zone="$(zone_for_instance "${instance_name} ")"

    echo "gcloud beta compute ssh --zone ${zone} --project ${project} ${instance_name} --tunnel-through-iap --command ${command}"
    gcloud beta compute ssh --zone "${zone}" --project "${project}" "${instance_name}" --tunnel-through-iap --command "${command}"
}

# exec_all_environments runs a command on all instances (or filtered instances) in an environment (uat or prod)
# example:
# exec_all_environments uat ls
#   will run ls on all instances in uat.  Will prompt before running
#
# supports a -f or --filter option to filter the results to a globbed string
# e.g.:
# exec_all_environments prod ifconfig -f capture
#    will run ifconfig on all prod instances whose name matches *capture*
#
# Adding a -y or --noprompt will not prompt before running
function exec_all_environments() {

    POSITIONAL_ARGS=()
    local filter=""
    local yesall=0
    while [[ $# -gt 0 ]]; do
        case $1 in
        -f | --filter)
            filter="$2"
            shift # past argument
            shift # past value
            ;;
        -y | --noprompt)
            yesall=1
            shift # past argument
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift                   # past argument
            ;;
        esac
    done

    set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

    if [ -z "$1" ]; then
        echo "Usage: exec_all_environment env command [-f filter] [-y]"
        return 1
    fi
    local env="$1"
    local command="$2"

    for instance in $(grep -v pool "${BIN_DIR}/${env}-instances.tsv" | awk '{ print $1 }'); do
        if [[ ${instance} = *${filter}* ]]; then
            echo "Executing ${command} on ${instance}"

            if [ $yesall -gt 0 ]; then
                gcp_exec "${instance}" "${command}"
                sleep 2
            else
                select yn in "Y" "N"; do
                    case $yn in
                    [Yy1])
                        gcp_exec "${instance}" "${command}"
                        break
                        ;;
                    [Nn2]) break ;;
                    esac
                done
            fi
        fi
    done
}

# scp's a file from a particular instance to the local box
# usage: pull_from_gcp instance_name remote_file [local_file_location]
# default local_file_location is the current directory
function pull_from_gcp() {
    if [ -z "$1" ]; then
        echo "Usage: pull_from_gcp instance_name remote_file [local_file_location]"
        return 1
    fi
    if [ -z "$2" ]; then
        echo "Usage: pull_from_gcp instance_name remote_file [local_file_location]"
        return 1
    fi
    local local_file_location="${3:-"."}"
    local instance_name="$1"
    local remote_file="$2"
    project="$(project_for_instance "${instance_name}")"
    zone="$(zone_for_instance "${instance_name}")"

    echo "gcloud beta compute scp --zone ${zone} --project ${project} --tunnel-through-iap ${instance_name}:${remote_file} ${local_file_location}"
    gcloud beta compute scp --zone "${zone}" --project "${project}" --tunnel-through-iap "${instance_name}:${remote_file}" "${local_file_location}"
}

# Prints out the ids defined for the gateways in prod
# must be run in the Ava directory
function gateway_ids() {
    local env="${1:-prod}"
    yq e '.Gateways.* | { path| .[-1]: .MarketID}' config/gateways/$env.yml
}

function _talos_fn_complete {
    COMPREPLY=()
    case $COMP_CWORD in
    1)
        local uat_instances=$(awk '{ print $1 };' "${BIN_DIR}/uat-instances.tsv")
        local prod_instances=$(awk '{ print $1 };' "${BIN_DIR}/prod-instances.tsv")
        COMPREPLY=($(compgen -W "${uat_instances} ${prod_instances}" -- "${COMP_WORDS[$COMP_CWORD]}"))
        ;;
    *)
        COMPREPLY=($(compgen -f -- "${COMP_WORDS[$COMP_CWORD]}"))
        ;;

    esac
}
[ "$SHELL" = "/bin/bash" ] && complete -F _talos_fn_complete pg_tunnel gcp_exec cust_fix_tunnel local_tunnel project_for_instance zone_for_instance pull_from_gcp push_to_gcp

[ -e "${BIN_DIR}/prod-aliases.sh" ] && source "${BIN_DIR}/prod-aliases.sh"
[ -e "${BIN_DIR}/uat-aliases.sh" ] && source "${BIN_DIR}/uat-aliases.sh"

alias startStaging='([ -d apps/ava ] && cd apps/ava || true; BROWSER=none TSC_COMPILE_ON_ERROR=true ESLINT_NO_DEV_ERRORS=true yarn start:staging --verbose --progress | cat)'
alias startUat='([ -d apps/ava ] && cd apps/ava || true; BROWSER=none TSC_COMPILE_ON_ERROR=true ESLINT_NO_DEV_ERRORS=true yarn start:uat --verbose --progress | cat)'
