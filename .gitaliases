[alias]
    ### View all aliases defined in git config
    alias = "!git config --get-regexp '^alias\\.' | sed -E 's/alias\\.([[:alnum:]-]+).*/\\1/' | sort | xargs -I'{}' sh -c \"grep -B1 -e '^\\s\\+{}\\s*=' \\$(git config --show-origin 'alias.{}' | awk -F'[:[:space:]]' '{print \\$2}')\" - {} | awk '!(NR%2){alias=$0;gsub(/^[[:space:]]*[[:alnum:]-]+[[:space:]]*=[[:space:]]*/,\"\",alias);gsub(/\\\\033/,\"\\033\",p);print$0(p==\"\"?\"    ### \\033[3m\\033[2m\"alias\"\\033[0m\":p)}{($0 ~ /###/?p=$0:p=\"\")}'  | sed -re 's/( =)(.*)(###)/:*/g' | awk -F '*' '{printf \"\\033[1;31m%-30s\\033[0m %s\\n\", $1, $2}' | sort"
    ### View plain text definitions of git aliases
    alias-text = !git config --get-regexp '^alias\\.' | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
    ### List all local branches where the upstream no longer exists - use to cleanup by e.g. '\033[2m\033[3mgit cleanup-gone | xargs git branch -d\033[0m'
    cleanup-gone = !git branch -a --format='%(refname:short) %(upstream:track)' | grep '\\[gone\\]' | awk '{print $1}'
    ### Remove all PR worktrees (from reviews) that are merged
    cleanup-pr-trees = "git cleanup-gone | xargs git branch -d 2>&1 | grep \"checked\" | grep \"avatrees/pr\" | sed -e \"s#.*'\\(/home/damien/workspace/talos/avatrees/.*\\)'#\\1#\" | xargs -i bash -c \"echo {} && git worktree remove {}\""
    ### Cherry-pick changes, and append the original commit hash to the end of the commit message
    cp = cherry-pick -x
    ### Debug git aliases - e.g. '\033[2m\033[3mgit debug pushup\033[0m'
    debug = "!set -x; GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2 git"
    ### Edit the global gitaliases file
    edalias = "!f() { git config -e -f $( git config --show-origin alias.edalias | sed -e 's/file://' -e 's/[[:space:]]\\+.*//' ) ; }; f"
    ### Edit the local .git/config file
    edrc = config -e
    ### Fix the previous commit, amend, but keep the same message etc.
    fix = commit --amend --no-edit
    ### Edit the global .git/config file
    gedrc = config -e --global
    ### View commit history, with graph layout to show merges / etc.
    hist = log --pretty=onelinelog --date=short --graph --color=always
    ### List worktrees
    lsw = worktree list
    ### Create a new git branch, prefixed by `${user}/`, e.g. to create the branch "damien/sc-12345-hotfix" from origin/release-v3.14.15 - '\033[2m\033[3mgit newbranch sc-12345-hotfix origin/release-v3.14.15\033[0m'
    newbranch = "!f() { set -x; target=\"${1:-no-branch-name}\"; [ $# -gt 0 ] && shift; source=\"${1:-origin/HEAD}\"; [ $# -gt 0 ] && shift; user=$(whoami | sed -E 's/(.+)[^[:alnum:]].*/\\1/'); git sync; git switch --no-track -c \"${user}/${target#${user}/}\" \"${source}\" \"$@\"; git config --add \"branch.${user}/${target#${user}/}.forked-from\" \"${source}\"; }; f"
    ### Force push the current branch (with-lease for safety)
    pushf = push --force-with-lease
    ### Push the current branch to origin, with the same name
    pushup = -c push.default=current push -u
    ### Rebase the current branch onto origin/HEAD
    reup = !git sync && git rebase "$(git config --default 'origin/HEAD' --get branch.\"$(git symbolic-ref --short -q HEAD)\".forked-from)"
    st = status
    stash = stash -u
    ### Grep through all stashes - e.g. '\033[2m\033[3mgit stashgrep "fix"\033[0m'
    stashgrep = "!f() { for i in $(git stash list --format=\"%gd\") ; do git stash show -p $i | grep --color=always -C 4 -H --label=\"$i\" \"$@\"; done ; }; f"
    ### Stash everything but keep all changes still
    stashk = "!f() { git stash \"$@\" && git stash apply; }; f"
    ### Fetch everything from origin (synchronize with origin)
    sync = fetch -p -P --all --tags
    up = pull

    ### Show changes (and diff) where the search string was added / removed (\033[2m\033[3mgit log -p -S\033[0m)
    log-pickaxe-s = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff log -p --ext-diff -S \"$@\"; }; f"
    ### Show changes (and diff) where the search string occurs in added / removed lines (\033[2m\033[3mgit log -p -G\033[0m)
    log-pickaxe-g = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff log -p --ext-diff -G \"$@\"; }; f"
    ### git show -S
    show-pickaxe-s = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff show -p --ext-diff -S \"$@\"; }; f"
    ### git show -G
    show-pickaxe-g = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff show -p --ext-diff -G \"$@\"; }; f"
    ### git diff -S
    diff-pickaxe-s = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff diff -p -S \"$@\"; }; f"
    ### git diff -G
    diff-pickaxe-g = "!f() { GREPDIFF_REGEX=\"$1\" git -c diff.external=pickaxe-diff diff -p -G \"$@\"; }; f"

    # Inactive aliases ...

    # branches = branch -v
    # cleanup = !git branch --merged | grep -v '(^(\\*|\\+))' | xargs --no-run-if-empty git branch -d
    # g = grep --break --heading --line-number
    # missing = !git fetch -q && git ls-remote --refs | grep --color=always unsynced
    # pick = cherry-pick -x --edit
    # recent-branches = for-each-ref --sort=-committerdate --count=10 --format='%(HEAD) %(refname:short)' refs/heads/
    # heads = branch -vv
    # rev = notes show
    # rev2sha = !git log --pretty=onelinelog --date=short --all --color=always | grep --color=always
    # stat = show --stat
