#/bin/bash

#  _____________________________________________________________________________
#
#  Copyright (c) <2011-2021> <copyright steve varga@ vargaconsulting, Toronto, On>
#
#  Contact: Steven Varga
#           steven.varga@gmail.com
#           2019-2021 Toronto, On Canada
#  _____________________________________________________________________________

# Get command info
CMD_PWD=$(pwd)
CMD="$0"
CMD_DIR="$(cd "$(dirname "$CMD")" && pwd -P)"

# Defaults and command line options
[ "$VERBOSE" ] || VERBOSE=
[ "$DEBUG" ] || DEBUG=
[ "$SIZE" ] || SIZE=1280x720
[ "$X_POS" ] || X_POS=0
[ "$Y_POS" ] || Y_POS=0
[ "$IMAGE" ] || IMAGE=/home/damien/Pictures/green_screen_background.png
[ "$KEY" ] || KEY=green
[ "$SIMILARITY" ] || SIMILARITY=0.16
[ "$BLEND" ] || BLEND=0.01
[ "$CAMERA" ] || CAMERA=/dev/video4
[ "$DEVICE_NUMBER" ] || DEVICE_NUMBER="6"
[ "$OUTPUT" ] || OUTPUT="/dev/video${DEVICE_NUMBER}"
[ "$FRAME_RATE" ] || FRAME_RATE=30
[ "$LOGLEVEL" ] || LOGLEVEL=
[ "$LOCK_FILE" ] || LOCK_FILE="/var/run/user/${UID}/chromakey.pid"

# Basic helpers
out() { echo "$(date +%Y%m%dT%H%M%SZ): $*"; }
err() { out "$*" 1>&2; }
vrb() { [ ! "$VERBOSE" ] || out "$@"; }
dbg() { [ ! "$DEBUG" ] || err "$@"; }
die() { err "EXIT: $1" && [ "$2" ] && [ "$2" -ge 0 ] && exit "$2" || exit 1; }

# Show help function to be used below
show_help() {
	awk 'NR>1{print} /^(###|$)/{exit}' "$CMD"
	echo "chromakey replaces specified color key with background image of live video"
	echo "when '--image' is not specified it grabs the screen at '--x_pos' and '--y_pos'"
	echo "of area specified with '--size'"
	echo "USAGE: $(basename "$CMD") [arguments] "
	echo "ARGS:"
	MSG=$(awk '/# BEGIN SWITCHES/,/# END SWITCHES/' "$CMD" | sed -e 's/^[[:space:]]*/  /' -e 's/|/, /' -e 's/)//' | grep '^  -')
	EMSG=$(eval "echo \"$MSG\"")
	echo "$EMSG"
	echo ""
	echo "Copyright (c) <Steven Varga 2010-2021> <steven@vargaconsulting.ca, Toronto, On>"
}

finish() {
	# Your cleanup code here
	stop_camera
	unload_module
	rm $LOCK_FILE
}

kill_chromakey() {
	if [ -f "${LOCK_FILE}" ]; then
		CHROMAKEY_PID=$(cat $LOCK_FILE)
		if [ -n "${CHROMAKEY_PID}" ]; then
			kill $CHROMAKEY_PID
			while kill -0 $CHROMAKEY_PID 2>1 >/dev/null; do
				sleep 1
			done
			out "${CMD} process with ID ${CHROMAKEY_PID} has been killed"
		fi
	else
		out "No running ${CMD} process found"
	fi
}

unload_module() {
	dbg "--- Removing loaded v4l2loopback dkms"
	sudo modprobe -r v4l2loopback
}
load_module() {
	dbg "--- Loading v4l2loopback with device ${DEVICE_FILE}"
	sudo modprobe v4l2loopback video_nr="${DEVICE_NUMBER}" exclusive_caps=1 card_label="green-screen"
}

reload_v4l2() {
	unload_module
	load_module
}

start_camera() {
	dbg "Starting camera"
	ffmpeg $LOGLEVEL -hide_banner \
		-video_size $SIZE -framerate $FRAME_RATE -i $IMAGE \
		-f v4l2 -pix_fmt yuyv422 -framerate $FRAME_RATE -video_size $SIZE -i $CAMERA \
		-filter_complex "[0:v]scale=1280:720[imout];[1:v]crop=x=175:y=181:w=893:h=539,chromanr,chromakey=$KEY:$SIMILARITY:$BLEND[ckout];[imout][ckout]overlay=x=387:y=181" \
		-pix_fmt yuyv422 -f v4l2 $OUTPUT &
	FFMPEG_PID="${!}"
	dbg " - camera started with PID ${FFMPEG_PID}"
}

stop_camera() {
	if [ -n "${FFMPEG_PID}" ]; then # streamer is already running
		dbg "Stopping camera ${FFMPEG_PID}"
		kill "${FFMPEG_PID}" && sleep 2 || true
		FFMPEG_PID=""
	fi
}

# Parse command line options (odd formatting to simplify show_help() above)
NARGS=-1
while [ "$#" -ne "$NARGS" ]; do
	NARGS=$#
	case $1 in
	# BEGIN SWITCHES
	-h | --help) # This help message
		show_help
		exit 1
		;;
	-v | --verbose) # Enable verbose messages
		VERBOSE=$((VERBOSE + 1)) && shift && echo "#-INFO: VERBOSE=$VERBOSE" ;;

	-k | --key) # specify color key (DEFAULT: $KEY)
		shift && KEY="$1" && shift && vrb "#-INFO: KEY=$KEY" ;;
	-m | --similarity) # chromakey similarity (DEFAULT: $SIMILARITY)
		shift && SIMILARITY="$1" && shift && vrb "#-INFO: SIMILARITY=$SIMILARITY" ;;
	-b | --blend) # specify color key (DEFAULT: $BLEND)
		shift && BLEND="$1" && shift && vrb "#-INFO: BLEND=$BLEND" ;;
	-s | --size) # video stream size in pixels: $SIZE
		shift && SIZE="$1" && shift && vrb "#-INFO: SIZE=$SIZE" ;;
	-i | --image) # specify image for background (DEFAULT: $IMAGE)
		shift && IMAGE="$1" && shift && vrb "#-INFO: IMAGE=$IMAGE" ;;
	-c | --camera) # the real input camera device path (DEFAULT: $CAMERA)
		shift && CAMERA="$1" && shift && vrb "#-INFO: CAMERA=$CAMERA" ;;
	-o | --output) # v4l2 pseudo device  (DEFAULT: $OUTPUT)
		shift && OUTPUT="$1" && shift && vrb "#-INFO: OUTPUT=$OUTPUT" ;;
	-r | --rate) # frame rate  (DEFAULT: $FRAME_RATE)
		shift && FRAME_RATE="$1" && shift && vrb "#-INFO: FRAME_RATE=$FRAME_RATE" ;;
	-x | --x_pos) # xgrab: x position   (DEFAULT: $X_POS)
		shift && X_POS="$1" && shift && vrb "#-INFO: X_POS=$X_POS" ;;
	-y | --y_pos) # xgrab: y position  (DEFAULT: $Y_POS)
		shift && Y_POS="$1" && shift && vrb "#-INFO: Y_POS=$Y_POS" ;;
	-reload | --reload) # reload v4l2 driver then exit
		reload_v4l2
		exit 0
		;;
	-kill | --kill) # kill running chromakey process
		kill_chromakey
		exit $?
		;;
		# END SWITCHES
	esac
done

# chromakey color:similarity:blend:yuv
# sudo modprobe v4l2loopback -r && sudo modprobe v4l2loopback video_nr=6 exclusive_caps=1 card_label="green-screen"
# ./chromakey -i /home/steven/pictures/01.png --camera /dev/video0  -o /dev/video2

echo "$$" >$LOCK_FILE
trap finish EXIT

if [ ! -f /dev/video6 ]; then
	load_module
fi
dbg "--- Locking output format"
sudo v4l2-ctl --device "${OUTPUT}" --set-ctrl keep_format=1
start_camera
sleep 5

dbg "--- Setting device timeout (blank video if connection is lost)"
sudo v4l2-ctl --device "${OUTPUT}" --set-ctrl timeout=1500

# Trigger usage check in 1 second so that if the camera is not used the streamer will stop
(
	sleep 1
	touch "${OUTPUT}"
) &

dbg "--- Waiting for video device usage"
sudo inotifywait -e OPEN,CLOSE -m "${OUTPUT}" |
	while read dir op file; do
		if [ -n "${FFMPEG_PID}" ]; then                                                  # streamer is already running
			if [ "$(lsof -t "${OUTPUT}" | grep -v "${FFMPEG_PID}" | wc -l)" -eq "0" ]; then # no more clients
				dbg "--- No more clients, stopping green screen"
				stop_camera
			fi
		elif [ "$(lsof -t "${OUTPUT}" | wc -l)" -gt "0" ]; then # new clients
			dbg "--- Detected usage of camera, spinning up green screen"
			start_camera
		fi
	done

# SETTINGS FROM OBS STUDIO:
# Video crop:
# - Position: 387, 181
# - Crop: Left 175, Right 212, Top 181, Bottom 0
# ChromaKey Filter:
# - Similarity: 417 / 1000
# - Smoothness: 75 / 1000
# - Spill reduction: 1 / 1000

# if [ -z "$IMAGE" ]; then
# 	ffmpeg -hide_banner -video_size $SIZE -framerate $FRAME_RATE \
# 		-f x11grab -i :0.0+$X_POS,$Y_POS \
# 		-f v4l2 -pix_fmt yuyv422 -framerate $FRAME_RATE -video_size $SIZE -i $CAMERA -filter_complex \
# 		"[1:v]hflip,chromakey=$KEY:$SIMILARITY:$BLEND[ckout];[0:v][ckout]overlay" \
# 		-pix_fmt yuyv422 -f v4l2 $OUTPUT
# else

# fi
#https://ffmpeg.org/ffmpeg-filters.html#pad-1
#crop=x=175:y=212:w=893:h=539
#overlay=x=387:y=181
#chromakey=$KEY:$SIMILARITY:$BLEND,
